{"version":3,"sources":["../../../src/components/fields/AutoField.js"],"names":["Auto","props","component","undefined","allowedValues","checkboxes","fieldType","Array","Date","Number","Object","String","Boolean","Error","toString","ensureValue","includeInChain","initialValue"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGA,IAAMA,OAAO,SAAPA,IAAO,CAACC,KAAD,EAAW;AACtB,MAAIC,YAAYD,MAAMC,SAAtB;AACA,MAAIA,cAAcC,SAAlB,EAA6B;AAC3B,QAAIF,MAAMG,aAAV,EAAyB;AACvB,UAAIH,MAAMI,UAAN,IAAoBJ,MAAMK,SAAN,KAAoBC,KAA5C,EAAmD;AACjDL;AACD,OAFD,MAEO;AACLA;AACD;AACF,KAND,MAMO;AACL,cAAQD,MAAMK,SAAd;AACE,aAAKE,IAAL;AAAWN,0CAAuB;AAClC,aAAKK,KAAL;AAAYL,0CAAuB;AACnC,aAAKO,MAAL;AAAaP,yCAAsB;AACnC,aAAKQ,MAAL;AAAaR,0CAAuB;AACpC,aAAKS,MAAL;AAAaT,0CAAuB;AACpC,aAAKU,OAAL;AAAcV,0CAAuB;AACrC;AAAS,gBAAM,IAAIW,KAAJ,kCAAyCX,SAAzC,CAAN;AAPX;;AAUA,+BAAUA,SAAV,EAAqB,4BAArB,EAAmDD,MAAMK,SAAN,CAAgBQ,QAAhB,EAAnD;AACD;AACF;;AAED,SAAO,0BAAcZ,SAAd,EAAyBD,KAAzB,CAAP;AACD,CAzBD;;kBA2Be,4BAAaD,IAAb,EAAmB,EAAEe,aAAa,KAAf,EAAsBC,gBAAgB,KAAtC,EAA6CC,cAAc,KAA3D,EAAnB,C","file":"AutoField.js","sourcesContent":["import connectField from 'uniforms/connectField';\nimport invariant from 'fbjs/lib/invariant';\nimport { createElement } from 'react';\n\nimport NumField from './NumField';\nimport BoolField from './BoolField';\nimport DateField from './DateField';\nimport ListField from './ListField';\nimport NestField from './NestField';\nimport TextField from './TextField';\nimport RadioField from './RadioField';\nimport SelectField from './SelectField';\n\n\nconst Auto = (props) => {\n  let component = props.component;\n  if (component === undefined) {\n    if (props.allowedValues) {\n      if (props.checkboxes && props.fieldType !== Array) {\n        component = RadioField;\n      } else {\n        component = SelectField;\n      }\n    } else {\n      switch (props.fieldType) {\n        case Date: component = DateField; break;\n        case Array: component = ListField; break;\n        case Number: component = NumField; break;\n        case Object: component = NestField; break;\n        case String: component = TextField; break;\n        case Boolean: component = BoolField; break;\n        default: throw new Error(`Unsupported component type: ${component}`);\n      }\n\n      invariant(component, 'Unsupported field type: %s', props.fieldType.toString());\n    }\n  }\n\n  return createElement(component, props);\n};\n\nexport default connectField(Auto, { ensureValue: false, includeInChain: false, initialValue: false });\n"]}